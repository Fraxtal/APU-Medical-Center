/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Doctor.view;

import Doctor.controller.ChargesController;
import Doctor.view.DoctorMenu;
import Doctor.controller.DoctorCtrl;
import java.io.BufferedWriter;
import java.io.FileWriter;
import java.io.IOException;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JFrame;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableColumnModel;

/**
 *
 * @author Kingston Teoh
 */
public class DoctorCharges extends javax.swing.JFrame {
    private DoctorCtrl ctrl;
    private DefaultTableModel model;
    private ChargesController controller;

    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(DoctorCharges.class.getName());

    /**
     * Creates new form DoctorFeedbackandCharges
     */
    public DoctorCharges(DoctorCtrl ctrl) {
        initComponents();
        setupTable();
        controller = new ChargesController(model);
        setupItemComboBox();
        loadCharges();
        this.ctrl = ctrl;
    }
    private void setupItemComboBox() {
        String[] items = controller.getItems();
        Itemcmb.removeAllItems(); 
        for (String item : items) {
            Itemcmb.addItem(item);
        }
    }
    private void setupTable() {
        String[] cols = {"Invoice Details ID", "Item", "Quantity", "Price Per", "Total", "Invoice ID", "Appointment ID"};
        model = new DefaultTableModel(cols, 0) {
            public boolean isCellEditable(int r, int c) {
                return false;
            }
        };
        ChargesTable.setModel(model); 
    }
    private void loadCharges() {
        String filePath = "src\\database\\InvoiceDetails.txt";
        DoctorCtrl viewdoctor = new DoctorCtrl(model);
        viewdoctor.loadCharges(filePath);
    }
    private boolean validateInput() {
        if (AppointmentIDtxt.getText().trim().isEmpty()) { // Appointment ID field
            JOptionPane.showMessageDialog(this, "Please enter Appointment ID.");
            return false;
        }
        if (InvoiceIDtxt.getText().trim().isEmpty()) { // Invoice ID field
            JOptionPane.showMessageDialog(this, "Please enter Invoice ID.");
            return false;
        }
        if (Quantitytxt.getText().trim().isEmpty()) { // Quantity field
            JOptionPane.showMessageDialog(this, "Please enter Quantity.");
            return false;
        }
        try {
            Integer.parseInt(Quantitytxt.getText()); // Quantity field
            Double.parseDouble(PricePerItemtxt.getText()); // Price field
            Double.parseDouble(Totaltxt.getText()); // Total field
        } catch (NumberFormatException ex) {
            JOptionPane.showMessageDialog(this, 
                "Please enter valid numbers for quantity and price.");
            return false;
        }
        return true;
        }
    
        private void clearFields() 
        {
            AppointmentIDtxt.setText(""); // Appointment ID field
            Quantitytxt.setText(""); // Quantity field
            PricePerItemtxt.setText(""); // Price Per Item field  
            Totaltxt.setText(""); // Total field
        }
        
        private void saveToInvoicesFile(String invoiceId, double totalAmount, String appointmentId) {
            String filePath = "src\\database\\invoices.txt";
    
            try (BufferedWriter writer = new BufferedWriter(new FileWriter(filePath, true))) {
                String line = invoiceId + ";" + 
                            String.format("%.2f", totalAmount) + ";;" +
                            appointmentId;
                            writer.write(line);
                            writer.newLine();
            } catch (IOException e) {
                JOptionPane.showMessageDialog(this, "Error saving to invoices.txt: " + e.getMessage());
            }
        }
    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        Sendbtn = new javax.swing.JButton();
        Backbtn = new javax.swing.JButton();
        jLabel4 = new javax.swing.JLabel();
        jScrollPane5 = new javax.swing.JScrollPane();
        ChargesTable = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        Totaltxt = new javax.swing.JTextField();
        jLabel5 = new javax.swing.JLabel();
        PricePerItemtxt = new javax.swing.JTextField();
        jLabel6 = new javax.swing.JLabel();
        Itemcmb = new javax.swing.JComboBox<>();
        Calculatebtn = new javax.swing.JButton();
        Quantitytxt = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        InvoiceIDtxt = new javax.swing.JTextField();
        Addbtn = new javax.swing.JButton();
        Deletebtn = new javax.swing.JButton();
        jLabel3 = new javax.swing.JLabel();
        SendInvoiceIDtxt = new javax.swing.JTextField();
        jLabel7 = new javax.swing.JLabel();
        AppointmentIDtxt = new javax.swing.JTextField();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), "Charges"));

        Sendbtn.setText("Send");
        Sendbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                SendbtnActionPerformed(evt);
            }
        });

        Backbtn.setText("back");
        Backbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                BackbtnActionPerformed(evt);
            }
        });

        jLabel4.setText("Item:");

        ChargesTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null},
                {null, null, null, null, null, null, null}
            },
            new String [] {
                "Invoice Details ID", "Item", "Quantity", "Price Per", "Total", "Invoice ID", "Appointment ID"
            }
        ));
        jScrollPane5.setViewportView(ChargesTable);

        jLabel1.setText("Total:");

        jLabel5.setText("Price Per Item:");

        jLabel6.setText("Quantity:");

        Itemcmb.setModel(new javax.swing.DefaultComboBoxModel<>(new String[] { "Paracetamol", "Vitamin C", "Blood Test", "Consultation", "X-ray", "Antibiotics", "Blood Pressure Test" }));
        Itemcmb.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                ItemcmbActionPerformed(evt);
            }
        });

        Calculatebtn.setText("Calculate");
        Calculatebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                CalculatebtnActionPerformed(evt);
            }
        });

        Quantitytxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                QuantitytxtActionPerformed(evt);
            }
        });

        jLabel2.setText("Invoice ID:");

        InvoiceIDtxt.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                InvoiceIDtxtActionPerformed(evt);
            }
        });

        Addbtn.setText("Add");
        Addbtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                AddbtnActionPerformed(evt);
            }
        });

        Deletebtn.setText("Delete");
        Deletebtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                DeletebtnActionPerformed(evt);
            }
        });

        jLabel3.setText("Send Invoice ID:");

        jLabel7.setText("Appointment ID:");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(Backbtn)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel4)
                            .addComponent(jLabel1)
                            .addComponent(jLabel5)
                            .addComponent(jLabel6)
                            .addComponent(jLabel2)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(jLabel3)
                                .addComponent(Sendbtn))
                            .addComponent(jLabel7))
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(PricePerItemtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 145, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(Totaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, 144, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addComponent(Addbtn)
                                        .addGap(28, 28, 28)
                                        .addComponent(Deletebtn)
                                        .addGap(18, 18, 18)
                                        .addComponent(Calculatebtn))
                                    .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(AppointmentIDtxt, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(Itemcmb, javax.swing.GroupLayout.Alignment.LEADING, 0, 147, Short.MAX_VALUE)
                                        .addComponent(Quantitytxt, javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(InvoiceIDtxt, javax.swing.GroupLayout.Alignment.LEADING))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(44, 44, 44)
                                .addComponent(SendInvoiceIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 36, Short.MAX_VALUE)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 654, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7)
                    .addComponent(AppointmentIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(InvoiceIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4)
                    .addComponent(Itemcmb, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(10, 10, 10)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(Quantitytxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(14, 14, 14)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(PricePerItemtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(Totaltxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(28, 28, 28)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Addbtn)
                    .addComponent(Deletebtn)
                    .addComponent(Calculatebtn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(SendInvoiceIDtxt, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(33, 33, 33)
                .addComponent(Sendbtn)
                .addGap(88, 88, 88)
                .addComponent(Backbtn)
                .addGap(18, 18, 18))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addComponent(jScrollPane5, javax.swing.GroupLayout.PREFERRED_SIZE, 496, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void BackbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_BackbtnActionPerformed
        this.setVisible(false); // Close current frame
        DoctorMenu obj = new DoctorMenu(ctrl);
        obj.setVisible(true);        // TODO add your handling code here:
    }//GEN-LAST:event_BackbtnActionPerformed

    private void CalculatebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_CalculatebtnActionPerformed
        try {
        // Get values from the correct text fields
        String quantityText = Quantitytxt.getText().trim();    // Quantity from jTextField1
        String priceText = PricePerItemtxt.getText().trim();       // Price from jTextField4
        
        // Check if fields are empty
        if (quantityText.isEmpty() || priceText.isEmpty()) {
            JOptionPane.showMessageDialog(this, 
                "Please enter both quantity and price.");
            return;
        }
        
        // Parse the values
        int quantity = Integer.parseInt(quantityText);
        double pricePer = Double.parseDouble(priceText);
        
        // Calculate total
        double total = quantity * pricePer;
        
        // Display the total in jTextField2
        Totaltxt.setText(String.format("%.2f", total));
        
            } catch (NumberFormatException ex) {
        JOptionPane.showMessageDialog(this, 
            "Please enter valid numbers for quantity and price.\n" +
            "Quantity must be a whole number (e.g., 1, 2, 3).\n" +
            "Price must be a decimal number (e.g., 15.00, 20.50).");
        }     // TODO add your handling code here:
    }//GEN-LAST:event_CalculatebtnActionPerformed

    private void ItemcmbActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_ItemcmbActionPerformed
        String selectedItem = (String) Itemcmb.getSelectedItem();
        if (selectedItem != null) {
            double price = controller.getItemPrice(selectedItem);
            PricePerItemtxt.setText(String.format("%.2f", price)); // CORRECT: Setting to jTextField4 (Price Per Item)
        }
                // TODO add your handling code here:
    }//GEN-LAST:event_ItemcmbActionPerformed

    private void AddbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_AddbtnActionPerformed
        if (validateInput()) {
            String appointmentId = AppointmentIDtxt.getText().trim(); // New Appointment ID field
            String invoiceId = InvoiceIDtxt.getText().trim(); // Invoice ID field
            String item = (String) Itemcmb.getSelectedItem();
            int quantity = Integer.parseInt(Quantitytxt.getText()); // Quantity field
            double pricePer = Double.parseDouble(PricePerItemtxt.getText()); // Price Per Item field
            double total = Double.parseDouble(Totaltxt.getText()); // Total field
    
            controller.addCharge(invoiceId, item, quantity, pricePer, total, appointmentId);
            clearFields();
            loadCharges();
        }   // TODO add your handling code here:
    }//GEN-LAST:event_AddbtnActionPerformed

    private void DeletebtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_DeletebtnActionPerformed
        int selectedRow = ChargesTable.getSelectedRow(); // Use jTable4
        if (selectedRow == -1) {
            JOptionPane.showMessageDialog(this, 
                "Please select an item to delete.");
            return;
        }
        controller.deleteCharge(selectedRow);
    }//GEN-LAST:event_DeletebtnActionPerformed

    private void SendbtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_SendbtnActionPerformed
            String invoiceId = SendInvoiceIDtxt.getText().trim();
    
    if (invoiceId.isEmpty()) {
        JOptionPane.showMessageDialog(this, "Please enter Invoice ID to send.");
        return;
    }
    
    // Calculate total amount for this invoice and get appointment ID
    double totalAmount = 0;
    String appointmentId = "";
    
    for (int i = 0; i < model.getRowCount(); i++) {
        String rowInvoiceId = model.getValueAt(i, 5).toString(); // Invoice ID is at column 5
        if (rowInvoiceId.equals(invoiceId)) {
            String totalStr = model.getValueAt(i, 4).toString(); // Total is at column 4
            totalAmount += Double.parseDouble(totalStr);
            
            // Get appointment ID from the same row (column 6)
            if (appointmentId.isEmpty()) {
                appointmentId = model.getValueAt(i, 6).toString();
            }
        }
    }
    
    if (totalAmount == 0) {
        JOptionPane.showMessageDialog(this, "No charges found for Invoice ID: " + invoiceId);
        return;
    }
    
    // Save to invoices.txt with empty payment method
    saveToInvoicesFile(invoiceId, totalAmount, appointmentId);
    
    JOptionPane.showMessageDialog(this, 
        "Invoice " + invoiceId + " sent successfully!\n" +
        "Total Amount: $" + String.format("%.2f", totalAmount) +
        "\nAppointment ID: " + appointmentId);
         
    }//GEN-LAST:event_SendbtnActionPerformed

    private void QuantitytxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_QuantitytxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_QuantitytxtActionPerformed

    private void InvoiceIDtxtActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_InvoiceIDtxtActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_InvoiceIDtxtActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton Addbtn;
    private javax.swing.JTextField AppointmentIDtxt;
    private javax.swing.JButton Backbtn;
    private javax.swing.JButton Calculatebtn;
    private javax.swing.JTable ChargesTable;
    private javax.swing.JButton Deletebtn;
    private javax.swing.JTextField InvoiceIDtxt;
    private javax.swing.JComboBox<String> Itemcmb;
    private javax.swing.JTextField PricePerItemtxt;
    private javax.swing.JTextField Quantitytxt;
    private javax.swing.JTextField SendInvoiceIDtxt;
    private javax.swing.JButton Sendbtn;
    private javax.swing.JTextField Totaltxt;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane5;
    // End of variables declaration//GEN-END:variables
}
