/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer.view;
import javax.swing.table.DefaultTableModel;
import Customer.ctrl.CustomerController;
import Customer.model.Appointment;
import Customer.model.Customer;
import Customer.model.Invoice;
import Customer.services.CustomerService;
import java.io.File;
import java.io.IOException;
import java.time.LocalDateTime;
import javax.swing.JFileChooser;
import javax.swing.filechooser.FileNameExtensionFilter;
import org.apache.pdfbox.pdmodel.*;
import org.apache.pdfbox.pdmodel.font.*;

/**
 *
 * @author Nicholas
 */
public class AppointmentDetails extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AppointmentDetails.class.getName());
    
    private String currentAppointmentId;
    private CustomerController controller;
    private CustomerService customerService;
    public void setController(CustomerController controller) {
        this.controller = controller;
    }
    
    public void setCurrentCustomer(Customer customer) {
        this.customerService = new CustomerService();
        loadAppointmentDetails();
    }
    
    public AppointmentDetails() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jSeparator1 = new javax.swing.JSeparator();
        btnPrint = new javax.swing.JButton();
        btnReturn = new javax.swing.JButton();
        tbAptID = new javax.swing.JTextField();
        tbDoa = new javax.swing.JTextField();
        tbStatus = new javax.swing.JTextField();
        tbDoctor = new javax.swing.JTextField();
        tbInvTotal = new javax.swing.JTextField();
        tbInvMethod = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        InvDetails = new javax.swing.JTable();
        jScrollPane2 = new javax.swing.JScrollPane();
        tbFeedback = new javax.swing.JTextArea();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel1.setText("Appointment Details");

        jLabel2.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel2.setText("Appointment ID: ");

        jLabel3.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel3.setText("Date Of Appointment: ");

        jLabel4.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel4.setText("Status: ");

        jLabel5.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel5.setText("Doctor In Charged: ");

        jLabel6.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel6.setText("Doctor's Feedback: ");

        jLabel7.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel7.setText("Invoice Total: ");

        jLabel9.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel9.setText("Invoice Method: ");

        btnPrint.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        btnPrint.setText("Print Invoice");
        btnPrint.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPrintActionPerformed(evt);
            }
        });

        btnReturn.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        tbAptID.setEditable(false);
        tbAptID.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        tbDoa.setEditable(false);
        tbDoa.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        tbStatus.setEditable(false);
        tbStatus.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        tbDoctor.setEditable(false);
        tbDoctor.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        tbInvTotal.setEditable(false);
        tbInvTotal.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        tbInvMethod.setEditable(false);
        tbInvMethod.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N

        InvDetails.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        InvDetails.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null},
                {null, null, null, null}
            },
            new String [] {
                "Item Name", "Quantity", "Price Per", "Price Total"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(InvDetails);
        if (InvDetails.getColumnModel().getColumnCount() > 0) {
            InvDetails.getColumnModel().getColumn(0).setResizable(false);
            InvDetails.getColumnModel().getColumn(1).setResizable(false);
            InvDetails.getColumnModel().getColumn(2).setResizable(false);
            InvDetails.getColumnModel().getColumn(3).setResizable(false);
        }

        tbFeedback.setEditable(false);
        tbFeedback.setColumns(20);
        tbFeedback.setFont(new java.awt.Font("Serif", 0, 12)); // NOI18N
        tbFeedback.setRows(5);
        jScrollPane2.setViewportView(tbFeedback);

        jLabel10.setFont(new java.awt.Font("Serif", 1, 12)); // NOI18N
        jLabel10.setText("Invoice Details: ");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(16, 16, 16)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel2)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(tbAptID, javax.swing.GroupLayout.PREFERRED_SIZE, 139, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                .addGroup(layout.createSequentialGroup()
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                                        .addComponent(jLabel3)
                                        .addComponent(jLabel4)
                                        .addComponent(jLabel5)
                                        .addComponent(jLabel6))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                        .addComponent(tbDoa)
                                        .addComponent(tbStatus)
                                        .addComponent(tbDoctor, javax.swing.GroupLayout.DEFAULT_SIZE, 139, Short.MAX_VALUE)
                                        .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)))
                                .addGroup(layout.createSequentialGroup()
                                    .addGap(33, 33, 33)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                        .addComponent(jLabel9)
                                        .addComponent(jLabel7))
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(tbInvTotal)
                                        .addComponent(tbInvMethod)))))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 578, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(jLabel10)))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(btnPrint)
                                .addGap(18, 18, 18)
                                .addComponent(btnReturn)
                                .addGap(18, 18, 18))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 550, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(jLabel1))
                                .addGap(293, 293, 293)))))
                .addContainerGap(50, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(20, 20, 20)
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jSeparator1, javax.swing.GroupLayout.PREFERRED_SIZE, 3, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel2)
                            .addComponent(tbAptID, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel3)
                            .addComponent(tbDoa, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel4)
                            .addComponent(tbStatus, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel5)
                            .addComponent(tbDoctor, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(24, 24, 24)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 103, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel7)
                            .addComponent(tbInvTotal, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel9)
                            .addComponent(tbInvMethod, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel10)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 337, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(49, 49, 49)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnPrint)
                    .addComponent(btnReturn))
                .addContainerGap(18, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        controller.showCustomerDashboard();
    }//GEN-LAST:event_btnReturnActionPerformed

    private void btnPrintActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPrintActionPerformed
        // TODO add your handling code here:
        JFileChooser fc = new JFileChooser();
        fc.setDialogTitle("Save Appointment Details as PDF");
        fc.setFileFilter(new FileNameExtensionFilter("PDF Files", "pdf"));
        if (fc.showSaveDialog(this) == JFileChooser.APPROVE_OPTION) {
            File f = fc.getSelectedFile();
            if (!f.getName().toLowerCase().endsWith(".pdf")) {
                f = new File(f.getParentFile(), f.getName() + ".pdf");
            }
            try {
                exportAppointmentDetailsToPdf(f);
                javax.swing.JOptionPane.showMessageDialog(this, "Saved: " + f.getAbsolutePath());
            } catch (Exception e) {
                logger.severe(() -> "PDF export failed: " + e.getMessage());
                javax.swing.JOptionPane.showMessageDialog(this, "Failed to export PDF: " + e.getMessage(), "Error", javax.swing.JOptionPane.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_btnPrintActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(() -> new AppointmentDetails().setVisible(true));
    }


    public void loadAppointmentDetailsById(String appointmentId) {
        this.currentAppointmentId = appointmentId;
        loadAppointmentDetails();
    }

    private void loadAppointmentDetails() {
        if (currentAppointmentId == null || customerService == null) {
            return;
        }

        try {
            Appointment appointment = customerService.getAppointmentById(currentAppointmentId);
            if (appointment != null) {
                tbAptID.setText(appointment.getAppointmentId());
                tbDoa.setText(appointment.getDateOfAppointment().toString());
                tbStatus.setText(appointment.getStatus());
                tbDoctor.setText(appointment.getDoctorName());

                String apptId = currentAppointmentId;

                Invoice invoice = customerService.getInvoiceByAppointmentId(apptId);
                if (invoice != null) {
                    tbInvTotal.setText(String.format("RM %.2f", invoice.getTotal()));
                    tbInvMethod.setText(invoice.getPaymentMethod());
                    loadInvoiceDetailsTable(String.format("INV%03d", invoice.getInvoiceId()));
                } else {
                    tbInvTotal.setText("No invoice found");
                    tbInvMethod.setText("N/A");
                }

                String feedback = customerService.getDoctorFeedbackForAppointment(apptId);
                tbFeedback.setLineWrap(true);
                tbFeedback.setWrapStyleWord(true);
                tbFeedback.setText(feedback != null ? feedback : "No feedback has been provided by the doctor.");
            }
        } catch (Exception e) {
            logger.severe(() -> "Error loading appointment details: " + e.getMessage());
        }
    }

    private void loadInvoiceDetailsTable(String invoiceId) {
        try {
            Object[][] tableData = customerService.getInvoiceDetailsForDisplay(invoiceId);
            String[] columnNames = {"Item Name", "Quantity", "Price Per", "Price Total"};

            DefaultTableModel model = new DefaultTableModel(tableData, columnNames) {
                @Override
                public boolean isCellEditable(int row, int column) {
                    return false;
                }
            };

            InvDetails.setModel(model);
        } catch (Exception e) {
            logger.severe(() -> "Error loading invoice details: " + e.getMessage());
        }
    }

    private void exportAppointmentDetailsToPdf(File outFile) throws Exception {
        try (PDDocument document = new PDDocument()) {
            PDPage page = new PDPage();
            document.addPage(page);

            try (PDPageContentStream cs = new PDPageContentStream(document, page)) {

                // Fonts
                PDFont bold = new PDType1Font(Standard14Fonts.FontName.HELVETICA_BOLD);
                PDFont normal = new PDType1Font(Standard14Fonts.FontName.HELVETICA);

                float y = 750, margin = 50;
                float pageWidth = page.getMediaBox().getWidth() - 2 * margin;

                // Header
                printLine(cs, bold, 16, 200, y, "APU MEDICAL CENTRE");
                y -= 20;
                printLine(cs, normal, 11, 180, y, "Outpatient Appointment Summary");
                y -= 30;
                printLine(cs, normal, 9, 400, y, "Generated on: " +
                        LocalDateTime.now().toString().substring(0, 19));

                // Line
                y -= 20;
                cs.moveTo(margin, y); cs.lineTo(550, y); cs.stroke();

                // Appointment details
                y = printPair(cs, margin, y - 30, "Appointment ID:", tbAptID.getText(), bold, normal);
                y = printPair(cs, margin, y - 20, "Date of Appointment:", tbDoa.getText(), bold, normal);
                y = printPair(cs, margin, y - 20, "Status:", tbStatus.getText(), bold, normal);
                y = printPair(cs, margin, y - 20, "Doctor In Charge:", tbDoctor.getText(), bold, normal);

                // Feedback
                y -= 40;
                printLine(cs, bold, 11, margin, y, "Doctor's Feedback");
                y = printWrapped(cs, normal, 10, margin, y - 20, tbFeedback.getText(), pageWidth, 15);

                // Invoice summary
                y -= 20;
                printLine(cs, bold, 11, margin, y, "Invoice Summary");
                y = printPair(cs, margin, y - 20, "Invoice Total:", tbInvTotal.getText(), bold, normal);
                y = printPair(cs, margin, y - 20, "Payment Method:", tbInvMethod.getText(), bold, normal);

                // Invoice line items
                y -= 40;
                printLine(cs, bold, 11, margin, y, "Charges and Medicinal Prescription");
                y -= 20;

                float[] colWidths = {120, 80, 80, 100};

                // Table headers
                float x = margin;
                for (int c = 0; c < InvDetails.getColumnCount(); c++) {
                    printLine(cs, bold, 10, x, y, InvDetails.getColumnName(c));
                    x += colWidths[c];
                }

                // Table rows
                y -= 15;
                for (int r = 0; r < InvDetails.getRowCount(); r++) {
                    x = margin;
                    for (int c = 0; c < InvDetails.getColumnCount(); c++) {
                        Object val = InvDetails.getValueAt(r, c);
                        printLine(cs, normal, 10, x, y, val == null ? "" : String.valueOf(val));
                        x += colWidths[c];
                    }
                    y -= 15;
                }

                // Footer
                printWrapped(cs, normal, 9, 150, 50,
                        "This document is computer-generated and does not require a physical signature.",
                        400, 12);
            }
            document.save(outFile);
        }
    }

    //
    // === Helpers ===
    //
    private void printLine(PDPageContentStream cs, PDFont font, float size,
                           float x, float y, String text) throws IOException {
        cs.beginText();
        cs.setFont(font, size);
        cs.newLineAtOffset(x, y);
        cs.showText(text == null ? "" : text);
        cs.endText();
    }

    private float printPair(PDPageContentStream cs, float x, float y,
                            String label, String value,
                            PDFont bold, PDFont normal) throws IOException {
        printLine(cs, bold, 10, x, y, label);
        printLine(cs, normal, 10, x + 150, y, value == null ? "" : value);
        return y;
    }

    private float printWrapped(PDPageContentStream cs, PDFont font, float size,
                               float x, float y, String text,
                               float maxWidth, float lineHeight) throws IOException {
        if (text == null || text.isEmpty()) return y;
        String[] words = text.split("\\s+");
        StringBuilder line = new StringBuilder();
        for (String word : words) {
            String testLine = line + (line.isEmpty() ? "" : " ") + word;
            float w = font.getStringWidth(testLine) / 1000 * size;
            if (w > maxWidth) {
                printLine(cs, font, size, x, y, line.toString());
                y -= lineHeight;
                line = new StringBuilder(word);
            } else {
                line = new StringBuilder(testLine);
            }
        }
        if (!line.isEmpty()) {
            printLine(cs, font, size, x, y, line.toString());
            y -= lineHeight;
        }
        return y;
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTable InvDetails;
    private javax.swing.JButton btnPrint;
    private javax.swing.JButton btnReturn;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JTextField tbAptID;
    private javax.swing.JTextField tbDoa;
    private javax.swing.JTextField tbDoctor;
    private javax.swing.JTextArea tbFeedback;
    private javax.swing.JTextField tbInvMethod;
    private javax.swing.JTextField tbInvTotal;
    private javax.swing.JTextField tbStatus;
    // End of variables declaration//GEN-END:variables
}
