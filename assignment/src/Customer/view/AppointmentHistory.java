/*
 * Click nbfs://nbhost/SystemFileSystem/Templates/Licenses/license-default.txt to change this license
 * Click nbfs://nbhost/SystemFileSystem/Templates/GUIForms/JFrame.java to edit this template
 */
package Customer.view;
import Customer.ctrl.CustomerController;
import Customer.services.CustomerService;
import Customer.model.Customer;
import javax.swing.RowFilter;
import javax.swing.event.DocumentEvent;
import javax.swing.event.DocumentListener;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.TableRowSorter;
/**
 *
 * @author Nicholas
 */
public class AppointmentHistory extends javax.swing.JFrame {
    
    private static final java.util.logging.Logger logger = java.util.logging.Logger.getLogger(AppointmentHistory.class.getName());
    
    private CustomerController controller;
    private CustomerService customerService;
    private Customer currentCustomer;
    private TableRowSorter<DefaultTableModel> sorter;

    public void setController(CustomerController controller) {
        this.controller = controller;
    }
    
    public void setCurrentCustomer(Customer customer) {
        this.currentCustomer = customer;
        this.customerService = new CustomerService();
        loadAppointmentsToTable();
        setupSearchFilter();
    }

    public AppointmentHistory() {
        initComponents();
    }
    
    private void loadAppointmentsToTable() {
        if (currentCustomer != null && customerService != null) {
            try {
                // Get appointments for the current customer
                Object[][] appointmentsData = customerService.getAppointmentsForTable(currentCustomer.getId());
                
                // Create column names
                String[] columnNames = {"Appointment ID", "Date of Appointment", "Status", "Doctor Assigned"};
                
                // Create table model
                DefaultTableModel model = new DefaultTableModel(appointmentsData, columnNames) {};
                
                // Set the model to the table
                tbleAppointments.setModel(model);
                
                // Auto-resize columns
                tbleAppointments.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_ALL_COLUMNS);
                
                // Enable sorting/filtering
                sorter = new TableRowSorter<>(model);
                tbleAppointments.setRowSorter(sorter);
                applySearchFilter(tbSearch.getText());
                
            } catch (Exception e) {
                logger.severe(() -> "Error loading appointments: " + e.getMessage());
                // Show empty table if error occurs
                String[] columnNames = {"Appointment ID", "Date of Appointment", "Status", "Doctor Assigned"};
                DefaultTableModel model = new DefaultTableModel(new Object[0][4], columnNames);
                tbleAppointments.setModel(model);
                sorter = new TableRowSorter<>(model);
                tbleAppointments.setRowSorter(sorter);
            }
        }
    }

    private void setupSearchFilter() {
        tbSearch.getDocument().addDocumentListener(new DocumentListener() {
            public void insertUpdate(DocumentEvent e) { applySearchFilter(tbSearch.getText()); }
            public void removeUpdate(DocumentEvent e) { applySearchFilter(tbSearch.getText()); }
            public void changedUpdate(DocumentEvent e) { applySearchFilter(tbSearch.getText()); }
        });
    }

    private void applySearchFilter(String query) {
        if (sorter == null) return;
        String q = query == null ? "" : query.trim().toLowerCase();
        if (q.isEmpty()) {
            sorter.setRowFilter(null);
            return;
        }
        sorter.setRowFilter(new RowFilter<DefaultTableModel, Integer>() {
            public boolean include(Entry<? extends DefaultTableModel, ? extends Integer> entry) {
                int colCount = entry.getValueCount();
                for (int i = 0; i < colCount; i++) {
                    String value = String.valueOf(entry.getStringValue(i)).toLowerCase();
                    if (value.contains(q)) return true;
                }
                return false;
            }
        });
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        tbSearch = new javax.swing.JTextField();
        jScrollPane1 = new javax.swing.JScrollPane();
        tbleAppointments = new javax.swing.JTable();
        jLabel1 = new javax.swing.JLabel();
        btnReturn = new javax.swing.JButton();
        jLabel2 = new javax.swing.JLabel();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        tbleAppointments.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Appointment ID", "Date of Appointment", "Status", "Doctor Assigned"
            }
        ) {
            Class[] types = new Class [] {
                java.lang.String.class, java.lang.String.class, java.lang.String.class, java.lang.String.class
            };
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public Class getColumnClass(int columnIndex) {
                return types [columnIndex];
            }

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tbleAppointments.getTableHeader().setReorderingAllowed(false);
        tbleAppointments.setUpdateSelectionOnSort(false);
        jScrollPane1.setViewportView(tbleAppointments);
        if (tbleAppointments.getColumnModel().getColumnCount() > 0) {
            tbleAppointments.getColumnModel().getColumn(0).setResizable(false);
            tbleAppointments.getColumnModel().getColumn(1).setResizable(false);
            tbleAppointments.getColumnModel().getColumn(2).setResizable(false);
            tbleAppointments.getColumnModel().getColumn(3).setResizable(false);
        }

        jLabel1.setText("Search: ");

        btnReturn.setText("Return");
        btnReturn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnReturnActionPerformed(evt);
            }
        });

        jLabel2.setFont(new java.awt.Font("Serif", 1, 18)); // NOI18N
        jLabel2.setText("My Appointments");

        jButton2.setText("Export as PDF");

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(19, 19, 19)
                        .addComponent(jLabel2))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(53, 53, 53)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 617, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLabel1)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(tbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, 195, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(289, 289, 289)
                                .addComponent(btnReturn))
                            .addComponent(jButton2))))
                .addContainerGap(39, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jLabel2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1)
                    .addComponent(tbSearch, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnReturn))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 398, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton2)
                .addContainerGap(19, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnReturnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnReturnActionPerformed
        // TODO add your handling code here:
        this.setVisible(false);
        controller.showCustomerDashboard();
    }//GEN-LAST:event_btnReturnActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ReflectiveOperationException | javax.swing.UnsupportedLookAndFeelException ex) {
            logger.log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnReturn;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextField tbSearch;
    private javax.swing.JTable tbleAppointments;
    // End of variables declaration//GEN-END:variables

}
